name: Build Applications

on:
    push:
        branches: [main]
    workflow_dispatch:

jobs:
    #  build-macos:
    #    strategy:
    #      matrix:
    #        arch: [ arm64, x64 ]
    #    runs-on: macos-latest
    #    env:
    #      NODE_ENV: production
    #
    #    steps:
    #      - name: Checkout Repository
    #        uses: actions/checkout@v4
    #
    #      - name: Install pnpm
    #        uses: pnpm/action-setup@v2
    #
    #      - name: Setup Node.js
    #        uses: actions/setup-node@v4
    #        with:
    #          node-version: '24'
    #          cache: 'pnpm'
    #
    #      - name: Install Dependencies
    #        run: pnpm install
    #
    #      - name: Build React App
    #        run: pnpm build
    #
    #      - name: Build Electron App for macOS (${{ matrix.arch }})
    #        run: pnpm exec electron-builder --mac --${{ matrix.arch }} --publish never
    #
    #      - name: Get Package Version
    #        id: package-version
    #        run: echo "version=$(node -p "require('./package.json').version")" >> $GITHUB_OUTPUT
    #
    #      - name: Find DMG File
    #        id: find-dmg
    #        run: |
    #          DMG_PATH=$(find dist -name "*.dmg" -type f | head -n 1)
    #          echo "dmg_path=$DMG_PATH" >> $GITHUB_OUTPUT
    #          echo "dmg_name=$(basename $DMG_PATH)" >> $GITHUB_OUTPUT
    #
    #      - name: Upload DMG as Artifact
    #        uses: actions/upload-artifact@v4
    #        with:
    #          name: macos-${{ matrix.arch }}-app
    #          path: ${{ steps.find-dmg.outputs.dmg_path }}
    #          retention-days: 5
    #
    #      - name: Create Release
    #        id: create_release
    #        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    #        uses: softprops/action-gh-release@v2
    #        with:
    #          files: ${{ steps.find-dmg.outputs.dmg_path }}
    #          tag_name: v${{ steps.package-version.outputs.version }}
    #          name: Container Flow v${{ steps.package-version.outputs.version }}
    #          draft: false
    #          prerelease: false
    #          generate_release_notes: true
    #        env:
    #          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}

    build-windows:
        runs-on: windows-latest
        env:
            NODE_ENV: production

        steps:
            - name: Checkout Repository
              uses: actions/checkout@v4

            - name: Install pnpm
              uses: pnpm/action-setup@v2

            - name: Setup Node.js
              uses: actions/setup-node@v4
              with:
                  node-version: '24'
                  cache: 'pnpm'

            - name: Install Dependencies
              run: pnpm install

            - name: Build React App
              run: pnpm run build

            - name: Build Electron App for Windows
              run: pnpm exec electron-builder --win --x64 --publish never

            - name: Get Package Version
              id: package-version
              shell: pwsh
              run: |
                  $version = (Get-Content -Raw -Path package.json | ConvertFrom-Json).version
                  echo "version=$version" >> $env:GITHUB_OUTPUT

            - name: Find EXE File
              id: find-exe
              shell: pwsh
              run: |
                  $version = "${{ steps.package-version.outputs.version }}"
                  $exePath = Get-ChildItem -Path "release/$version" -Filter "*.exe" -Recurse | Select-Object -First 1 | ForEach-Object { $_.FullName }
                  echo "exe_path=$exePath" >> $env:GITHUB_OUTPUT
                  echo "exe_name=$($exePath | Split-Path -Leaf)" >> $env:GITHUB_OUTPUT

            - name: Upload EXE as Artifact
              uses: actions/upload-artifact@v4
              with:
                  name: windows-x64-app
                  path: ${{ steps.find-exe.outputs.exe_path }}
                  retention-days: 5

            - name: Create Release
              id: create_release
              if: github.event_name == 'push' && github.ref == 'refs/heads/main'
              uses: softprops/action-gh-release@v2
              with:
                  files: ${{ steps.find-exe.outputs.exe_path }}
                  tag_name: v${{ steps.package-version.outputs.version }}
                  name: Container Flow v${{ steps.package-version.outputs.version }}
                  draft: false
                  prerelease: false
                  generate_release_notes: true
              env:
                  GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
